/**
 * TypeScript Enums for OrchestratAI
 *
 * This file contains all enum definitions used throughout the application.
 * These enums provide type-safe constant values and are synchronized with
 * the backend Python enums via validation scripts.
 *
 * @module enums
 */

/**
 * AgentStatus - Represents the current operational state of an AI agent
 *
 * - IDLE: Agent is waiting for work assignment
 * - ROUTING: Orchestrator agent is routing a query to specialist agents
 * - ACTIVE: Agent is actively processing a user query
 */
export enum AgentStatus {
  IDLE = "idle",
  ROUTING = "routing",
  ACTIVE = "active",
}

/**
 * AgentId - Unique identifier for each specialist agent type
 *
 * - ORCHESTRATOR: Router agent that determines which specialist should handle the query
 * - BILLING: Billing and payment support specialist
 * - TECHNICAL: Technical support and troubleshooting specialist
 * - POLICY: Policy, compliance, and regulatory specialist
 */
export enum AgentId {
  ORCHESTRATOR = "orchestrator",
  BILLING = "billing",
  TECHNICAL = "technical",
  POLICY = "policy",
}

/**
 * MessageRole - Identifies the sender type of a chat message
 *
 * - USER: Message sent by the end user
 * - ASSISTANT: Message generated by an AI agent
 */
export enum MessageRole {
  USER = "user",
  ASSISTANT = "assistant",
}

/**
 * LogType - Category of retrieval operation being logged
 *
 * - ROUTING: Query routing decision made by orchestrator
 * - VECTOR_SEARCH: Vector database similarity search operation
 * - CACHE: Cache lookup or storage operation
 * - DOCUMENTS: Document retrieval from knowledge base
 */
export enum LogType {
  ROUTING = "routing",
  VECTOR_SEARCH = "vector_search",
  CACHE = "cache",
  DOCUMENTS = "documents",
}

/**
 * LogStatus - Status indicator for operation logs
 *
 * - SUCCESS: Operation completed successfully
 * - WARNING: Operation completed but with warnings or degraded performance
 * - ERROR: Operation failed
 */
export enum LogStatus {
  SUCCESS = "success",
  WARNING = "warning",
  ERROR = "error",
}

/**
 * RetrievalStrategy - RAG/CAG approach used by an agent for information retrieval
 *
 * - PURE_RAG: Pure Retrieval-Augmented Generation (vector search only)
 * - PURE_CAG: Pure Context-Augmented Generation (predefined context only)
 * - HYBRID_RAG_CAG: Hybrid approach combining both retrieval and predefined context
 */
export enum RetrievalStrategy {
  PURE_RAG = "Pure RAG",
  PURE_CAG = "Pure CAG",
  HYBRID_RAG_CAG = "Hybrid RAG/CAG",
}

/**
 * AgentColor - UI color coding for visual agent identification
 *
 * - CYAN: Orchestrator agent color
 * - GREEN: Billing agent color
 * - BLUE: Technical agent color
 * - PURPLE: Policy agent color
 */
export enum AgentColor {
  CYAN = "cyan",
  GREEN = "green",
  BLUE = "blue",
  PURPLE = "purple",
}
