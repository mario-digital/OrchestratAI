#!/usr/bin/env sh

echo "🚫 BLOCKING DIRECT PUSH TO MAIN"
echo ""

# Get the current branch name
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Prevent direct push to main
if [ "$CURRENT_BRANCH" = "main" ]; then
  echo "❌ ERROR: Direct pushes to 'main' branch are not allowed!"
  echo ""
  echo "Please create a feature branch and submit a Pull Request instead:"
  echo "  1. Create a new branch: git checkout -b feature/your-feature-name"
  echo "  2. Make your changes and commit them"
  echo "  3. Push your branch: git push -u origin feature/your-feature-name"
  echo "  4. Create a Pull Request on GitHub"
  echo ""
  exit 1
fi

echo "🧪 Running pre-push checks..."

# Git hygiene checks
if git ls-files --error-unmatch .env >/dev/null 2>&1; then
  echo "❌ Detected tracked .env file. Remove it before pushing."
  exit 1
fi

# Detect what changed to determine which checks to run
CHANGED_FILES=$(git diff --name-only origin/main...HEAD 2>/dev/null || git diff --name-only HEAD)

# Determine if frontend or backend changed
FRONTEND_CHANGED="false"
BACKEND_CHANGED="false"

if echo "$CHANGED_FILES" | grep "^orchestratai_client/" >/dev/null 2>&1; then
  FRONTEND_CHANGED="true"
fi

if echo "$CHANGED_FILES" | grep "^orchestratai_api/" >/dev/null 2>&1; then
  BACKEND_CHANGED="true"
fi

# Frontend checks (only if frontend files changed AND orchestratai_client exists)
if [ "$FRONTEND_CHANGED" = "true" ] && [ -d "orchestratai_client" ]; then
  echo "🔍 Linting frontend..."
  (cd orchestratai_client && bun run lint) || { echo "❌ Frontend linting failed"; exit 1; }

  echo "📝 Type checking frontend..."
  (cd orchestratai_client && bun run typecheck) || { echo "❌ Frontend type check failed"; exit 1; }

  echo "🔬 Running frontend tests with coverage..."
  bun --cwd orchestratai_client test -- --coverage || { echo "❌ Frontend tests (with coverage) failed"; exit 1; }

  # Production build check
  echo "🏗️ Building frontend..."
  (cd orchestratai_client && bun run build) || {
    echo "❌ Frontend build failed";
    exit 1;
  }
elif [ "$FRONTEND_CHANGED" = "true" ]; then
  echo "⚠️ Frontend files changed but orchestratai_client directory not found (worktree?)."
  echo "   Skipping frontend checks - ensure they pass in main repo or CI/CD."
fi

# Backend checks (only if backend files changed AND orchestratai_api exists)
if [ "$BACKEND_CHANGED" = "true" ] && [ -d "orchestratai_api" ]; then
  echo "🐍 Linting backend..."
  (cd orchestratai_api && uv run ruff check .) || { echo "❌ Backend linting failed"; exit 1; }

  echo "🐍 Type checking backend..."
  (cd orchestratai_api && uv run mypy src/) || { echo "❌ Backend type check failed"; exit 1; }

  echo "🐍 Running backend tests with coverage..."
  PYTHONPATH=./orchestratai_api uv run --project orchestratai_api pytest --cov=src --cov-report=term --cov-report=html --cov-fail-under=80 || { echo "❌ Backend tests or coverage failed"; exit 1; }
elif [ "$BACKEND_CHANGED" = "true" ]; then
  echo "⚠️ Backend files changed but orchestratai_api directory not found (worktree?)."
  echo "   Skipping backend checks - ensure they pass in main repo or CI/CD."
fi

# If neither changed, warn
if [ "$FRONTEND_CHANGED" = "false" ] && [ "$BACKEND_CHANGED" = "false" ]; then
  echo "ℹ️ No frontend or backend files changed. Skipping checks."
fi

echo "✅ All checks passed! Pushing..."
